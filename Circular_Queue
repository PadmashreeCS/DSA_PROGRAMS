//circular queue
#include <stdio.h>
#include <stdlib.h>

#define SIZE 5

int front = -1;
int rear = -1;
int choice;
int stack[SIZE];

int isfull()
{
    return ((front == 0 && rear == SIZE - 1) || ((rear + 1) % SIZE == front));
}

int isempty() {
    return (front == -1);
}

void enqueue() {
    if (isfull()) {
        printf("Queue is full\n");
    } else {
        int value;
        printf("Enter the value to insert: ");
        scanf("%d", &value);

        if (front == -1) {
            front = 0;
        }

        rear = (rear + 1) % SIZE;
        stack[rear] = value;
        printf("Inserted value: %d\n", stack[rear]);
    }
}

void dequeue() {
    if (isempty()) {
        printf("Queue is empty\n");
    } else {
        int element = stack[front];

        if (front == rear) {
            front = -1;
            rear = -1;
        } else {
            front = (front + 1) % SIZE;
        }

        printf("Deleted element: %d\n", element);
    }
}

void display() {
    if (isempty()) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements: ");
        int i = front;
        while (1) {
            printf("%d ", stack[i]);
            if (i == rear) break;
            i = (i + 1) % SIZE;
        }
        printf("\n");
    }
}

int main() {
    while (1) {
        printf("\n1. Insert  2. Delete  3. Display  4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: enqueue(); break;
            case 2: dequeue(); break;
            case 3: display(); break;
            case 4: exit(0);
            default: printf("Invalid entry\n");
        }
    }

    return 0;
}
